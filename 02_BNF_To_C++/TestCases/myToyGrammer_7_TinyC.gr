
<def>							::= 	<functionList>;
<functionList>					::=		{ <functionDef> } ;
<functionDef>					::=		<returnType>		"<code>"
																std::string sReturnType = GrammerUtils::m_pPrevToken.getText();
															"</code>"
										TK_IDENTIFIER		"<code>"
																std::string sFunctionName = GrammerUtils::m_pPrevToken.getText();
																updateBlockString(sFunctionName);
																
																Tree* pFunctionDefNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONDEF, sFunctionName.c_str());
																Tree* pReturnTypeNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONRETURNTYPE, sReturnType.c_str());
																Tree* pArgListNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONARGLIST, "");
																{
																	pReturnTypeNode->m_pParentNode = pFunctionDefNode;
																	pArgListNode->m_pParentNode = pFunctionDefNode;
																	
																	m_pASTCurrentNode->addChild(pFunctionDefNode);
																	
																	pFunctionDefNode->m_pLeftNode = pReturnTypeNode;
																	pFunctionDefNode->m_pRightNode = pArgListNode;
																}
															"</code>"
										'('					"<code>"
																Tree* pTemp = nullptr;
																{
																	pTemp = m_pASTCurrentNode; // Save Root Node temporarily
																	m_pASTCurrentNode = pArgListNode;
																}
															"</code>"
										[ <functionArgumentDefList>	]	"<code>"
																			m_pASTCurrentNode = pTemp;
																		"</code>"
																
										')'
										'{'					"<code>"
																pTemp = m_pASTCurrentNode; // Save Root Node temporarily
																m_pASTCurrentNode = pFunctionDefNode;
																
																Tree* pFuncStartNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONSTART, "");
																m_pASTCurrentNode->addChild(pFuncStartNode);
															"</code>"
										<stmt_list>
										'}'					"<code>"
																removeLastFromBlockString();
																
																Tree* pFuncEndNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONEND, "");
																m_pASTCurrentNode->addChild(pFuncEndNode);

																m_pASTCurrentNode = pTemp;
															"</code>"
										;

<returnType>					::=		(	"int"
											|
											"void"
											|
											"string"
										);
<functionArgumentDefList>		::=		{ <functionArgumentDefListMore> };
<functionArgumentDefListMore>	::=		(	<primitiveTypeInt>
											[',']
											|
											<primitiveTypeString>
											[',']
										);
<primitiveTypeInt>				::= 	"int" 
										TK_IDENTIFIER		"<code>"
																std::string sArgName = GrammerUtils::m_pPrevToken.getText();
																std::string sFullyQualifiedArgName;
																sFullyQualifiedArgName.append(getBlockString());
																sFullyQualifiedArgName.append(sArgName);

																Tree* pPrimIntNode = makeLeaf(ASTNodeType::ASTNode_PRIMITIVETYPEINT, sFullyQualifiedArgName.c_str());
																{
																	pPrimIntNode->m_sAdditionalInfo.append(sArgName);
																	
																	m_pASTCurrentNode->addChild(pPrimIntNode);
																	m_pASTCurrentNode->m_sAdditionalInfo.append("I");
																}
															"</code>"
										;
<primitiveTypeString>			::= 	"string" 
										TK_IDENTIFIER		"<code>"
																std::string sArgName = GrammerUtils::m_pPrevToken.getText();
																std::string sFullyQualifiedArgName;
																sFullyQualifiedArgName.append(getBlockString());
																sFullyQualifiedArgName.append(sArgName);
																
																Tree* pPrimStringNode = makeLeaf(ASTNodeType::ASTNode_PRIMITIVETYPESTRING, sFullyQualifiedArgName.c_str());
																{
																	pPrimStringNode->m_sAdditionalInfo.append(sArgName);
																	
																	m_pASTCurrentNode->addChild(pPrimStringNode);
																	m_pASTCurrentNode->m_sAdditionalInfo.append("S");
																}
															"</code>"
										;
										
										
<stmt_list> 					::=		{ <stmt> };
<stmt>      					::=   	( <assignOrFuncCall> | <assignmentNewVariable> | <ifelse> | <_while> | <print> | <putc> | <bracesstmtlist> ) ;

<assignOrFuncCall>				::= 	TK_IDENTIFIER
										( <assignmentRHS> | <functionCall> );

<functionCall>					::=		"<code>"
											std::string sIdentifier = GrammerUtils::m_pPrevToken.getText();
										"</code>"
										'('				"<code>"
															Tree* pFunctionCallNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONCALL, sIdentifier.c_str());
															Tree* pTemp = nullptr;
															{
																m_pASTCurrentNode->addChild(pFunctionCallNode);
																
																pTemp = m_pASTCurrentNode;
																m_pASTCurrentNode = pFunctionCallNode;
															}
														"</code>"
										[ <functionArgumentList> ]
										')'
										';' 			"<code>"
															Tree* pFuncCallEndNode = makeLeaf(ASTNodeType::ASTNode_FUNCTIONCALLEND, sIdentifier.c_str());
															m_pASTCurrentNode->addChild(pFuncCallEndNode);
															
															m_pASTCurrentNode = pTemp;
														"</code>"
										;
										
<functionArgumentList>			::=		{ <functionArgumentItem> } ;
<functionArgumentItem>			::=		( 	TK_STRING  	"<code>"
															Tree* pStringNode = makeLeaf(ASTNodeType::ASTNode_STRING, GrammerUtils::m_pPrevToken.getText());
															{
																m_pASTCurrentNode->addChild(pStringNode);
																m_pASTCurrentNode->m_sAdditionalInfo.append("S");
															}
														"</code>"
											[',']
											|
											<expr> 		"<code>"
															Tree* pExpressionLeftLeaf = createPostFixExpr();
															{
																m_pASTCurrentNode->addChild(pExpressionLeftLeaf);
																pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
																
																m_pASTCurrentNode->m_sAdditionalInfo.append("I");
															}
														"</code>"
											[',']
											|
											TK_INTEGER	"<code>"
																Tree* pIntegerNode = makeLeaf(ASTNodeType::ASTNode_INTEGER, GrammerUtils::m_pPrevToken.getText());
																{
																	m_pASTCurrentNode->addChild(pIntegerNode);
																	m_pASTCurrentNode->m_sAdditionalInfo.append("C");
																}
															"</code>"
											|
											TK_CHARACTER	"<code>"
																Tree* pCharacterNode = makeLeaf(ASTNodeType::ASTNode_CHARACTER, GrammerUtils::m_pPrevToken.getText());
																{
																	m_pASTCurrentNode->addChild(pCharacterNode);
																	m_pASTCurrentNode->m_sAdditionalInfo.append("I");
																}
															"</code>"
										) ;

<ifelse>						::= 	<_if>;
<_if>							::=		"if" 			"<code>"
															Tree* pIfNode = makeLeaf(ASTNodeType::ASTNode_IF, GrammerUtils::m_pPrevToken.getText());
															Tree* pTemp = nullptr;
															{
																m_pASTCurrentNode->addChild(pIfNode);

																pTemp = m_pASTCurrentNode;
																m_pASTCurrentNode = pIfNode;
															}
														"</code>"
										'('
										<expr>			"<code>"
															Tree* pExpressionLeftLeaf = createPostFixExpr();
															{
																m_pASTCurrentNode->m_pLeftNode = pExpressionLeftLeaf;
																pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
															}
														"</code>"
										')'
										['{'] 			"<code>"
															updateBlockString("if");
														"</code>"
										<stmt_list> 
										['}'] 			"<code>"
															removeLastFromBlockString();
														"</code>"
										[ <_else> ]		"<code>"
															m_pASTCurrentNode = pTemp;
														"</code>"
										;
										
<_else>							::=		"else" 			"<code>"
															Tree* pElseNode = makeLeaf(ASTNodeType::ASTNode_ELSE, GrammerUtils::m_pPrevToken.getText());
															Tree* pIfNode = nullptr;
															{	
																pIfNode = m_pASTCurrentNode;
																pElseNode->m_pParentNode = pIfNode->m_pParentNode;
																
																m_pASTCurrentNode = pElseNode;
															}
														"</code>"
										['{'] 			"<code>"
															updateBlockString("else");
														"</code>"
										<stmt_list> 
										['}'] 			"<code>"
															removeLastFromBlockString();
															
															pIfNode->m_pRightNode = pElseNode;
															{
																m_pASTCurrentNode = pIfNode;
															}
														"</code>"
										;

<_while>						::= 	"while" 		"<code>"
															Tree* pWhileNode = makeLeaf(ASTNodeType::ASTNode_WHILE, GrammerUtils::m_pPrevToken.getText());
															Tree* pTemp = nullptr;
															{
																m_pASTCurrentNode->addChild(pWhileNode);
																
																pTemp = m_pASTCurrentNode;
																m_pASTCurrentNode = pWhileNode;
															}
														"</code>"
										'('
										<expr>			"<code>"
															Tree* pExpressionLeftLeaf = createPostFixExpr();
															{
																pWhileNode->m_pLeftNode = pExpressionLeftLeaf;
																pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
															}
														"</code>"
										')'
										['{'] 			"<code>"
															updateBlockString("while");
														"</code>"
										<stmt_list> 
										['}'] 			"<code>"
															removeLastFromBlockString();
															m_pASTCurrentNode = pTemp;
														"</code>"
										
										;

<print>							::= 	"print" 
										'(' 			"<code>"
															Tree* pPrintNode = makeLeaf(ASTNodeType::ASTNode_PRINT, GrammerUtils::m_pPrevToken.getText());
															Tree* pTemp = nullptr;
															{
																m_pASTCurrentNode->addChild(pPrintNode);
																
																pTemp = m_pASTCurrentNode;
																m_pASTCurrentNode = pPrintNode;
															}
														"</code>"
										<print_list> 
										')' ';' 		"<code>"
															m_pASTCurrentNode = pTemp;
														"</code>"
										;
										
<print_list>					::= 	{ <print_list_0> } ;
<print_list_0>					::= 	( 	TK_STRING  	"<code>"
															Tree* pStringNode = makeLeaf(ASTNodeType::ASTNode_STRING, GrammerUtils::m_pPrevToken.getText());
															{
																m_pASTCurrentNode->addChild(pStringNode);
															}
														"</code>"
											[',']
											|
											<expr> 		"<code>"
															Tree* pExpressionLeftLeaf = createPostFixExpr();
															{
																m_pASTCurrentNode->addChild(pExpressionLeftLeaf);
																pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
															}
														"</code>"
											[',']
											|
											TK_CHARACTER	"<code>"
																Tree* pCharacterNode = makeLeaf(ASTNodeType::ASTNode_CHARACTER, GrammerUtils::m_pPrevToken.getText());
																{
																	m_pASTCurrentNode->addChild(pCharacterNode);
																}
															"</code>"
										) ;

<putc>							::=		"putc" 				"<code>"
																Tree* pPutCNode = makeLeaf(ASTNodeType::ASTNode_PUTC, GrammerUtils::m_pPrevToken.getText());
																Tree* pTemp = nullptr;
																{
																	m_pASTCurrentNode->addChild(pPutCNode);

																	pTemp = m_pASTCurrentNode;
																	m_pASTCurrentNode = pPutCNode;
																}
															"</code>"
										'(' 
										<putcList>
										')' ';'				"<code>"
																m_pASTCurrentNode = pTemp;
															"</code>"
										;
										
<putcList>						::=		( 	TK_IDENTIFIER 	"<code>"
																std::string sVariableName = GrammerUtils::m_pPrevToken.getText();
																std::string sFullyQualifiedVariableName = getFullyQualifiedNameForVariable(m_pASTCurrentNode, sVariableName);
																assert(!sFullyQualifiedVariableName.empty());

																Tree* pIdentifierNode = makeLeaf(ASTNodeType::ASTNode_IDENTIFIER, sFullyQualifiedVariableName.c_str());
																m_pASTCurrentNode->addChild(pIdentifierNode);
															"</code>"
											|
											TK_INTEGER		"<code>"
																Tree* pIntegerNode = makeLeaf(ASTNodeType::ASTNode_INTEGER, GrammerUtils::m_pPrevToken.getText());
																m_pASTCurrentNode->addChild(pIntegerNode);
															"</code>"
											|
											TK_CHARACTER 	"<code>"
																Tree* pCharacterNode = makeLeaf(ASTNodeType::ASTNode_CHARACTER, GrammerUtils::m_pPrevToken.getText());
																m_pASTCurrentNode->addChild(pCharacterNode);
															"</code>"
										);

<bracesstmtlist>				::= 	'{' 				"<code>"
																updateBlockString("{");
															"</code>"
										<stmt_list> 
										'}'					"<code>"
																removeLastFromBlockString();
															"</code>"
										;

<assignmentNewVariable>			::=		( <newInt> | <newString> );

<newInt>						::= 	"int" 
										TK_IDENTIFIER 		"<code>"
																std::string sVariableName = GrammerUtils::m_pPrevToken.getText();
																std::string sFullyQualifiedVariableName;
																sFullyQualifiedVariableName.append(getBlockString());
																sFullyQualifiedVariableName.append(sVariableName);
															"</code>"
										'='					"<code>" 
																Tree* pPrimIntNode = makeLeaf(ASTNodeType::ASTNode_PRIMITIVETYPEINT, sFullyQualifiedVariableName.c_str());
																{
																	pPrimIntNode->m_sAdditionalInfo.append(sVariableName);
																}
															"</code>"
										<expr>				"<code>"
																Tree* pExpressionLeftLeaf = createPostFixExpr();
																{
																	pPrimIntNode->m_pLeftNode = pExpressionLeftLeaf;
																	pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
																}
															"</code>"
										';'					"<code>"
																m_pASTCurrentNode->addChild(pPrimIntNode);
															"</code>"
										;
<newString>						::= 	"string" 
										TK_IDENTIFIER 		"<code>"
																std::string sVariableName = GrammerUtils::m_pPrevToken.getText();
																std::string sFullyQualifiedVariableName;
																sFullyQualifiedVariableName.append(getBlockString());
																sFullyQualifiedVariableName.append(sVariableName);
															"</code>"
										'='					"<code>" 
																Tree* pPrimStringNode = makeLeaf(ASTNodeType::ASTNode_PRIMITIVETYPESTRING, sFullyQualifiedVariableName.c_str());
																{
																	pPrimStringNode->m_sAdditionalInfo.append(sVariableName);
																}
															"</code>"
										<expr>				"<code>"
																Tree* pExpressionLeftLeaf = createPostFixExpr();
																{
																	pPrimStringNode->m_pLeftNode = pExpressionLeftLeaf;
																	pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
																}
															"</code>"
										';'					"<code>"
																m_pASTCurrentNode->addChild(pPrimStringNode);
															"</code>"
										;

<assignmentRHS>					::=  	"<code>"
											std::string sVariableName = GrammerUtils::m_pPrevToken.getText();
										"</code>"
										'='				"<code>" 
															std::string sFullyQualifiedVariableName = getFullyQualifiedNameForVariable(m_pASTCurrentNode, sVariableName);
															assert(!sFullyQualifiedVariableName.empty());

															Tree* pAssignmentNode = makeLeaf(ASTNodeType::ASTNode_ASSIGN, "");
															Tree* pTemp = nullptr;
															{
																m_pASTCurrentNode->addChild(pAssignmentNode);
																
																pTemp = m_pASTCurrentNode;
																m_pASTCurrentNode = pAssignmentNode;
															}
															
															Tree* pIdentifierLeaf = makeLeaf(ASTNodeType::ASTNode_IDENTIFIER, sFullyQualifiedVariableName.c_str());
															{
																pIdentifierLeaf->m_sAdditionalInfo = sVariableName;
																pAssignmentNode->m_pRightNode = pIdentifierLeaf;
															}
														"</code>"
										<expr>			"<code>"
															Tree* pExpressionLeftLeaf = createPostFixExpr();
															{
																m_pASTCurrentNode->m_pLeftNode = pExpressionLeftLeaf;
																pExpressionLeftLeaf->m_pParentNode = m_pASTCurrentNode;
															}
														"</code>"
										';'				"<code>"
															m_pASTCurrentNode = pTemp;
														"</code>"
										;
										
<paren_expr>					::=   	[<unary_oper>] '(' <expr> ')' ;
										
<expr>                			::=		<and_expr> { <logicalor_expr> } ;
										
<logicalor_expr>				::=		"||" 		"<code>" 
														checkOpPrecedenceAndPush("||");
													"</code>"
										<and_expr> ;
		
<and_expr>            			::=   	<equality_expr> { <logicaland_expr> } ;
<logicaland_expr>				::= 	"&&" 		"<code>" 
														checkOpPrecedenceAndPush("&&");
													"</code>"
										<equality_expr> ;
		
<equality_expr>       			::=   	<relational_expr> [ <equality_expr_optional> ] ;
<equality_expr_optional>		::=		<equality> <relational_expr> ;
<equality>						::= 	(	"==" 	"<code>" 
														checkOpPrecedenceAndPush("==");
													"</code>"
											| 
											"!="	"<code>" 
														checkOpPrecedenceAndPush("!=");
													"</code>"
										) ;
		
<relational_expr>     			::=   	<addition_expr> [ <relational_expr_optional> ] ;
<relational_expr_optional>		::= 	<relational> <addition_expr> ;
<relational>					::= 	(	'<' 	"<code>" 
														checkOpPrecedenceAndPush("<");
													"</code>"
											| 
											"<=" 	"<code>" 
														checkOpPrecedenceAndPush("<=");
													"</code>"
											| 
											'>' 	"<code>" 
														checkOpPrecedenceAndPush(">");
													"</code>"
											| 
											">="	"<code>" 
														checkOpPrecedenceAndPush(">=");
													"</code>"
										) ;
	
<addition_expr>       			::=   	<multiplication_expr> { <addition_expr_optional> } ;
<addition_expr_optional>		::=		<add_sub> <multiplication_expr> ;
<add_sub>						::=		(	'+' 	"<code>" 
														checkOpPrecedenceAndPush("+");
													"</code>"
											| 
											'-'		"<code>" 
														checkOpPrecedenceAndPush("-");
													"</code>"
										) ;
	
<multiplication_expr> 			::=   	<primary> { <multiplication_expr_optional> } ;
<multiplication_expr_optional> 	::=   	<mul_div_mod> <primary> ;
<mul_div_mod>					::=		(	'*' 	"<code>" 
														checkOpPrecedenceAndPush("*");
													"</code>"
											| 
											'/' 	"<code>" 
														checkOpPrecedenceAndPush("/");
													"</code>"
											| 
											'%'		"<code>" 
														checkOpPrecedenceAndPush("%");
													"</code>"
										) ;

<primary>             			::=   	<defaults> ;
//<defaults>						::= 	( <operands> | <paren_expr> | <unary_oper> ) ;
<defaults>						::= 	( <operands> | <paren_expr> ) ;
<operands>						::=		"<code>"
											std::string sOperand;
										"</code>"
										
										( 	TK_IDENTIFIER 	"<code>"
																sOperand = GrammerUtils::m_pPrevToken.getText();
																std::string sFullyQualifiedVariableName = getFullyQualifiedNameForVariable(m_pASTCurrentNode, sOperand);
																assert(!sFullyQualifiedVariableName.empty());
																if(!sFullyQualifiedVariableName.empty())
																{
																	sOperand = sFullyQualifiedVariableName;
																}
																
																m_vPostFix.push_back(sOperand);
															"</code>"
											| 
											TK_INTEGER		"<code>"
																sOperand = GrammerUtils::m_pPrevToken.getText();
																m_vPostFix.push_back(sOperand);
															"</code>"
											|
											TK_CHARACTER	"<code>"
																sOperand = GrammerUtils::m_pPrevToken.getText();
																char pStr[255] = {0};
																sprintf_s(pStr, "%d", sOperand.c_str()[0]);

																m_vPostFix.push_back(pStr);
															"</code>"
										) ;
<unary_oper>					::=		(	'+' 
											| 
											'-' 
											| 
											'!'				"<code>" 
																checkOpPrecedenceAndPush("!");
															"</code>"
										);

